<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->

<!--
Defines global properties and useful macros.
Android-adapted version while maintaining all original functionality.

This script is included in /build.xml and /config/update-dependencies.xml.
-->
<project name="definitions" basedir="../" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property name="bin.ant" location="bin/classes/ant" relative="true"/>

    <!-- Compile custom Ant tasks -->
    <mkdir dir="bin/classes/ant"/>
    <javac
        sourcepath="" debug="yes" source="8" target="8" encoding="UTF-8" includeantruntime="false" nowarn="true"
        destdir="bin/classes/ant"
        classpath="${ant.core.lib}"
        srcdir="modules/ant/src/main/java"
        includes="org/lwjgl/**"
        taskname="javac: Custom Ant Tasks"
    />

    <!-- Define custom Ant tasks -->
    <taskdef name="logLevel" classname="org.lwjgl.SetLogLevel" classpath="${bin.ant}"/>
    <taskdef name="bindingConfig" classname="org.lwjgl.BindingConfig" classpath="${bin.ant}"/>
    <taskdef name="detectJDKVersion" classname="org.lwjgl.DetectJDKVersion" classpath="${bin.ant}"/>

    <property environment="env"/>

    <!--
        The target native architecture.
        Modified for Android's common architectures while keeping all original options.
    -->
    <property name="build.arch" value="${env.LWJGL_BUILD_ARCH}" if:set="env.LWJGL_BUILD_ARCH"/>

    <local name="is64Bit"/>
    <condition property="is64Bit" value="true" else="false">
        <or>
            <contains string="${os.arch}" substring="64"/>
            <contains string="${os.arch}" substring="armv8"/>
            <!-- Android-specific checks -->
            <equals arg1="${os.arch}" arg2="aarch64"/>
            <equals arg1="${os.arch}" arg2="arm64-v8a"/>
        </or>
    </condition>

    <!-- Enhanced architecture detection for Android -->
    <condition property="build.arch.arm" value="true">
        <or>
            <contains string="${build.arch}" substring="arm"/>
            <contains string="${os.arch}"    substring="arm"/>
            <contains string="${os.arch}"    substring="aarch64"/>
            <!-- Android ABIs -->
            <equals arg1="${os.arch}" arg2="armeabi-v7a"/>
            <equals arg1="${os.arch}" arg2="arm64-v8a"/>
        </or>
    </condition>

    <!-- Keep all original architecture detection -->
    <condition property="build.arch.ppc" value="true">
        <or>
            <contains string="${build.arch}" substring="ppc"/>
            <contains string="${os.arch}"    substring="ppc"/>
        </or>
    </condition>
    <condition property="build.arch.riscv" value="true">
        <or>
            <contains string="${build.arch}" substring="riscv"/>
            <contains string="${os.arch}"    substring="riscv"/>
        </or>
    </condition>
    <condition property="build.arch.x64|x86" value="true">
        <and>
            <not><isset property="build.arch.arm"/></not>
            <not><isset property="build.arch.ppc"/></not>
            <not><isset property="build.arch.riscv"/></not>
        </and>
    </condition>

    <!-- Normalize os.arch with Android-specific additions -->
    <condition property="build.arch" value="arm64"      unless:set="build.arch">
        <and>
            <isset property="build.arch.arm"/>    
            <istrue value="${is64Bit}"/>
            <or>
                <equals arg1="${os.arch}" arg2="arm64-v8a"/>
                <equals arg1="${os.arch}" arg2="aarch64"/>
            </or>
        </and>
    </condition>
    <condition property="build.arch" value="arm32"      unless:set="build.arch">
        <and>
            <isset property="build.arch.arm"/>    
            <isfalse value="${is64Bit}"/>
            <or>
                <equals arg1="${os.arch}" arg2="armeabi-v7a"/>
                <equals arg1="${os.arch}" arg2="arm"/>
            </or>
        </and>
    </condition>
    <condition property="build.arch" value="ppc64le"    unless:set="build.arch"><and><isset property="build.arch.ppc"/>    <istrue  value="${is64Bit}"/></and></condition>
    <condition property="build.arch" value="riscv64"    unless:set="build.arch"><and><isset property="build.arch.riscv"/>  <istrue  value="${is64Bit}"/></and></condition>
    <condition property="build.arch" value="x64"        unless:set="build.arch"><and><isset property="build.arch.x64|x86"/><istrue  value="${is64Bit}"/></and></condition>
    <condition property="build.arch" value="x86"        unless:set="build.arch"><and><isset property="build.arch.x64|x86"/><isfalse value="${is64Bit}"/></and></condition>
    <property      name="build.arch" value="${os.arch}" unless:set="build.arch"/>

    <fail message="Invalid or unsupported build architecture: ${build.arch}. Supported: x64, x86, arm64, arm32, ppc64le, riscv64">
        <condition><not><matches string="${build.arch}" pattern="^(x64|x86|arm64|arm32|ppc64le|riscv64)$"/></not></condition>
    </fail>

    <property name="build.arch.${build.arch}" value="true"/>

    <!-- Keep original build type options -->
    <condition property="build.type" value="${env.LWJGL_BUILD_TYPE}" else="nightly">
        <isset property="env.LWJGL_BUILD_TYPE"/>
    </condition>

    <!-- Keep original output directory configuration -->
    <property name="build.output" location="${env.LWJGL_BUILD_OUTPUT}" relative="false" if:set="env.LWJGL_BUILD_OUTPUT"/>

    <!-- Original directory structure preserved -->
    <property name="lib" location="bin/libs" relative="true"/>
    <property name="kotlinc" location="${lib}/kotlinc" relative="true"/>
    <property name="module.lwjgl" location="modules/lwjgl" relative="true"/>
    <property name="src.extract" location="modules/extract/src/main" relative="true"/>
    <property name="src.generator" location="modules/generator/src/main" relative="true"/>
    <property name="test.resources" location="modules/samples/src/test/resources" relative="true"/>
    <property name="bin.extract" location="bin/classes/extract" relative="true"/>
    <property name="bin.generator" location="bin/classes/generator" relative="true"/>
    <property name="bin.javadoc" location="bin/javadoc" relative="true"/>
    <property name="bin.lwjgl" location="bin/classes/lwjgl" relative="true"/>
    <property name="bin.samples" location="bin/classes/samples" relative="true"/>
    <property name="bin.templates" location="bin/classes/templates" relative="true"/>
    <property name="bin.test" location="bin/classes/test" relative="true"/>
    <property name="bin.test.html" location="bin/test" relative="true"/>
    <property name="release" location="bin/RELEASE" relative="true"/>
    <property name="release.doc" location="${release}/doc" relative="true"/>
    <property name="release.jar" location="${release}/jar" relative="true"/>
    <property name="release.native" location="${release}/native" relative="true"/>

    <!-- Keep offline build flag -->
    <condition property="build.offline" value="${env.LWJGL_BUILD_OFFLINE}" else="false">
        <isset property="env.LWJGL_BUILD_OFFLINE"/>
    </condition>

    <!-- Platform detection with Android additions -->
    <condition property="platform.freebsd">
        <os name="FreeBSD"/>
    </condition>
    <condition property="platform.linux">
        <os name="Linux"/>
    </condition>
    <condition property="platform.macos">
        <os name="Mac OS X"/>
    </condition>
    <condition property="platform.windows">
        <os family="Windows"/>
    </condition>
    <condition property="platform.android">
        <isset property="env.ANDROID_NDK_HOME"/>
    </condition>

    <property name="platform" value="android" if:set="platform.android"/>
    <property name="platform" value="freebsd" if:set="platform.freebsd"/>
    <property name="platform" value="linux" if:set="platform.linux"/>
    <property name="platform" value="macos" if:set="platform.macos"/>
    <property name="platform" value="windows" if:set="platform.windows"/>
    <fail message="Failed to detect a supported platform."><condition><not><isset property="platform"/></not></condition></fail>

    <property name="platform.remote" value="macosx" if:set="platform.macos"/>
    <property name="platform.remote" value="${platform}"/>

    <!-- Native library location with Android support -->
    <property name="lib.native" location="${lib}/native/${platform}/${build.arch}" relative="true"/>

    <detectJDKVersion/>

    <!-- Keep original Java version conditions -->
    <condition property="core.java23"><isset property="core.java24"/></condition>
    <condition property="core.java22"><isset property="core.java23"/></condition>
    <condition property="core.java21"><isset property="core.java22"/></condition>
    <condition property="core.java17"><isset property="core.java21"/></condition>
    <condition property="core.java11"><isset property="core.java17"/></condition>

    <!-- JNI headers location with Android support -->
    <condition property="jni.headers" value="${env.ANDROID_NDK_HOME}/sysroot/usr/include">
        <isset property="platform.android"/>
    </condition>
    <property name="jni.headers" location="${java.home}/include" if:set="jdk11" unless:set="platform.android"/>
    <property name="jni.headers" location="${java.home}/../include" unless:set="jdk11" unless:set="platform.android"/>
    
    <condition property="set-boot-class-path">
        <and>
            <isset property="jdk11"/>
            <isset property="env.JAVA8_HOME"/>
            <not><isset property="platform.android"/></not>
        </and>
    </condition>

    <!-- Different location per platform/architecture. This is intentional. -->
    <property name="bin.native" location="bin/${platform}/${build.arch}" relative="true"/>

    <import file="build-bindings.xml"/>
    <bindingConfig/>

    <!-- Keep original javac presets -->
    <presetdef name="lwjgl.javac">
        <javac sourcepath="" debug="yes" source="8" target="8" encoding="UTF-8" includeantruntime="false">
            <compilerarg line='--boot-class-path "${env.JAVA8_HOME}/jre/lib/rt.jar"' if:set="set-boot-class-path"/>
            <compilerarg value="-Xlint:all" unless:set="jdk21"/>
            <compilerarg line="-Xlint:all,-options" if:set="jdk21"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </presetdef>

    <presetdef name="lwjgl.javac11">
        <javac sourcepath="" debug="yes" encoding="UTF-8" includeantruntime="false">
            <compilerarg line="--release 11"/>
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </presetdef>

    <presetdef name="lwjgl.javac17">
        <javac sourcepath="" debug="yes" encoding="UTF-8" includeantruntime="false">
            <compilerarg line="--release 17"/>
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </presetdef>

    <presetdef name="lwjgl.javac21">
        <javac sourcepath="" debug="yes" encoding="UTF-8" includeantruntime="false">
            <compilerarg line="--release 21"/>
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </presetdef>

    <!-- Keep all original macros -->
    <macrodef name="quiet">
        <element name="body" implicit="yes"/>
        <sequential>
            <logLevel level="error"/>
            <body/>
            <logLevel level="info"/>
        </sequential>
    </macrodef>

    <macrodef name="mkdir-symlink">
        <attribute name="dir"/>
        <sequential>
            <mkdir dir="@{dir}" unless:set="build.output"/>
            <local name="useSymlink"/>
            <condition property="useSymlink" value="1">
                <and>
                    <isset property="build.output"/>
                    <not>
                        <available property="dirExists" file="@{dir}" type="dir"/>
                    </not>
                </and>
            </condition>
            <mkdir dir="${build.output}/@{dir}" if:set="useSymlink"/>
            <local name="useSymlinkUnix"/>
            <condition property="useSymlinkUnix" value="1">
                <and>
                    <isset property="useSymlink"/>
                    <not>
                        <isset property="platform.windows"/>
                    </not>
                </and>
            </condition>
            <symlink link="@{dir}" resource="${build.output}/@{dir}" if:set="useSymlinkUnix"/>
            <local name="useSymlinkWindows"/>
            <condition property="useSymlinkWindows" value="1">
                <and>
                    <isset property="useSymlink"/>
                    <isset property="platform.windows"/>
                </and>
            </condition>
            <exec executable="cmd" if:set="useSymlinkWindows" failonerror="true">
                <arg value="/c"/>
                <arg value="mklink"/>
                <arg value="/J"/>
                <arg value="@{dir}"/>
                <arg value="${build.output}\@{dir}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="delete-symlink">
        <attribute name="dir"/>
        <sequential>
            <delete dir="${build.output}/@{dir}" if:set="build.output"/>
            <delete dir="@{dir}"/>
        </sequential>
    </macrodef>

    <macrodef name="confirm-replace">
        <attribute name="dir"/>
        <attribute name="msg"/>
        <sequential>
            <local name="dir.exists"/>
            <available file="@{dir}" type="dir" property="dir.exists"/>
            <local name="input"/>
            <input
                message="@{msg}"
                validargs="y,n"
                defaultvalue="n"
                addproperty="input"
                if:set="dir.exists"
                />
            <fail message="Cancelled" if:set="dir.exists">
                <condition if:set="dir.exists">
                    <equals arg1="n" arg2="${input}"/>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <macrodef name="get-quiet">
        <attribute name="name"/>
        <attribute name="url"/>
        <attribute name="dest"/>
        <attribute name="skipexisting" default="true"/>
        <sequential>
            <quiet>
                <get taskname="@{name}" src="@{url}" dest="@{dest}" usetimestamp="true" skipexisting="@{skipexisting}"/>
            </quiet>
        </sequential>
    </macrodef>

    <macrodef name="update-mvn">
        <attribute name="name"/>
        <attribute name="group"/>
        <attribute name="artifact"/>
        <attribute name="version"/>
        <attribute name="classifier" default=""/>
        <attribute name="subfolder" default=""/>
        <attribute name="sources" default="true"/>
        <sequential>
            <get-quiet name="@{name}" url="https://repo.maven.apache.org/maven2/@{group}/@{artifact}/@{version}/@{artifact}-@{version}@{classifier}.jar" dest="${lib}/java@{subfolder}/@{artifact}.jar" skipexisting="false"/>
            <get-quiet name="@{name}" url="https://repo.maven.apache.org/maven2/@{group}/@{artifact}/@{version}/@{artifact}-@{version}-sources.jar" dest="${lib}/java@{subfolder}/@{artifact}-sources.jar" skipexisting="false" if:true="@{sources}"/>
        </sequential>
    </macrodef>

    <macrodef name="update-dependency">
        <attribute name="module"/>
        <attribute name="artifact"/>
        <sequential>
            <sequential if:true="${binding.@{module}}">
                <local name="dest"/>
                <property name="dest" value="${lib.native}/${module.@{module}.path}"/>
                <mkdir dir="${dest}"/>
                <get-quiet name="@{module} :: @{artifact}" url="https://build.lwjgl.org/${build.type}/${platform.remote}/${build.arch}/@{artifact}" dest="${dest}" skipexisting="false"/>
            </sequential>
        </sequential>
    </macrodef>
</project>
